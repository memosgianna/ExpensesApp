@model IEnumerable<FinanceApp.Models.Expense>
@using System.Text.Json
@{
    // Grouping the expenses by Category and summing the Amounts
    var chartData = Model
        .GroupBy(e => e.Category)
        .Select(g => new
        {
            Category = g.Key,
            Total = g.Sum(e => e.Amount)
        })
        .ToList();
}

<h2 class="mt-4 mb-3 text-center">📊 My Expenses Overview</h2>

<div class="container mb-5">
    <div class="row mb-4">
        <div class="col-12">
            <canvas id="expensesChart" height="120"></canvas>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <table class="table table-bordered table-striped text-center align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Description</th>
                        <th>Amount (€)</th>
                        <th>Category</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Description</td>
                            <td>@item.Amount</td>
                            <td>@item.Category</td>
                            <td>@item.Date.ToString("dd-MM-yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="d-flex justify-content-between">
        <a asp-controller="Home" asp-action="Index" class="btn btn-secondary btn-lg">
            ⬅️ Return to Home
        </a>
        <a asp-controller="Expenses" asp-action="Create" class="btn btn-success btn-lg">
            ➕ Add New Expense
        </a>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const ctx = document.getElementById('expensesChart').getContext('2d');

                const categories = @Html.Raw(JsonSerializer.Serialize(chartData.Select(x => x.Category)));
        const totals = @Html.Raw(JsonSerializer.Serialize(chartData.Select(x => x.Total)));

        // Define a set of distinct colors for bars (add more if needed)
        const barColors = [
          'rgba(255, 99, 132, 0.6)',    // red
          'rgba(54, 162, 235, 0.6)',    // blue
          'rgba(255, 206, 86, 0.6)',    // yellow
          'rgba(75, 192, 192, 0.6)',    // teal
          'rgba(153, 102, 255, 0.6)',   // purple
          'rgba(255, 159, 64, 0.6)',    // orange
          'rgba(199, 199, 199, 0.6)'    // grey
        ];

        // Assign colors cycling through the array if more categories than colors
        const backgroundColors = categories.map((_, i) => barColors[i % barColors.length]);
        const borderColors = backgroundColors.map(color => color.replace('0.6', '1'));

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: categories,
                datasets: [{
                    label: 'Total Spent per Category (€)',
                    data: totals,
                    backgroundColor: backgroundColors,
                    borderColor: borderColors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            font: { size: 14 }
                        }
                    },
                    title: {
                        display: true,
                        text: 'Your Expenses by Category',
                        font: { size: 18 }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 5
                        }
                    }
                }
            }
        });
    </script>
}
